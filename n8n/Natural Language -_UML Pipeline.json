{
  "name": "Natural Language ->UML Pipeline",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "=NLPipeline/extract",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -2048,
        16
      ],
      "id": "e3ed6ad6-26c4-40e7-bc07-8453743a048e",
      "name": "Webhook",
      "webhookId": "16969fc1-f7d4-4142-80f2-69c1d6673060",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.stdout }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        288,
        160
      ],
      "id": "3d9eb944-8d25-49d6-8615-50219f8d9327",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Pull fields from Webhook (works whether they're in body or top-level)\nconst req = $json.body?.requirement || $json.requirement || \"\";\nconst bundle = $json.body?.bundle_name || $json.bundle_name || \"Bundle1\";\n\n// Hardened Extract prompt — stricter JSON-only + MUST-include devices\nconst prompt = `\nYou are a compiler that converts a natural-language smart-home requirement into a STRICT JSON spec.\nOutput ONLY a single JSON object accepted by JSON.parse(). No markdown, no code fences, no prose.\n\nHARD CONSTRAINTS (must be followed exactly):\n1) JSON only. Double quotes everywhere. No trailing commas. No comments.\n2) Keys allowed: bundle_name, devices, states, transitions, notes. Do not add others.\n3) You MUST include ALL of these devices exactly (even if the requirement text never mentions them):\n   {\"id\":\"presenceSensor\",\"type\":\"presenceSensor\",\"attributes\":[\"presence\"]}\n   {\"id\":\"motionSensor\",\"type\":\"motionSensor\",\"attributes\":[\"motion\"]}\n   {\"id\":\"switch\",\"type\":\"switch\",\"attributes\":[\"switch\"]}\n   - Do not rename ids or types. Do not omit any of the three.\n4) Capabilities and values:\n   presenceSensor.presence ∈ {\"present\",\"notpresent\"}\n   motionSensor.motion ∈ {\"active\",\"inactive\"}\n   switch.switch ∈ {\"on\",\"off\"}\n   Allowed actions: switch.on(), switch.off()\n5) Trigger grammar: <device>.<attribute> (==|!=) \"<value>\" with optional && or || between atoms.\n   Action grammar: exactly <device>.<command>().\n6) States/Transitions must be internally consistent with declared devices/attributes.\n   (It's acceptable if the requirement uses only presence + switch—motionSensor may be declared but unused.)\n7) Set \"bundle_name\" to \"${bundle}\".\n\nSCHEMA (exact shape):\n{\n  \"bundle_name\": string,\n  \"devices\": [ { \"id\": string, \"type\": string, \"attributes\": [string, ...] }, ... ],\n  \"states\":  [ { \"id\": string, \"invariants\": [string, ...] }, ... ],\n  \"transitions\": [ { \"source\": string, \"target\": string, \"trigger\": string, \"action\": string }, ... ],\n  \"notes\": string\n}\n\nDEFAULT PATTERN (when requirement maps to presence→switch lamp control):\n- states:\n  Off1 → invariants: [\"presenceSensor.presence == \\\\\"notpresent\\\\\", \"switch.switch == \\\\\"off\\\\\"\"]\n  On1  → invariants: [\"presenceSensor.presence == \\\\\"present\\\\\"\",     \"switch.switch == \\\\\"on\\\\\"\"]\n- transitions:\n  Off1 → On1 when presence becomes present; action \"switch.on()\"\n  On1 → Off1 when presence becomes notpresent; action \"switch.off()\"\n\nOUTPUT EXAMPLE (format only; values may vary):\n{\n  \"bundle_name\": \"Bundle1\",\n  \"devices\": [\n    {\"id\": \"presenceSensor\", \"type\": \"presenceSensor\", \"attributes\": [\"presence\"]},\n    {\"id\": \"motionSensor\",   \"type\": \"motionSensor\",   \"attributes\": [\"motion\"]},\n    {\"id\": \"switch\",         \"type\": \"switch\",         \"attributes\": [\"switch\"]}\n  ],\n  \"states\": [\n    {\"id\": \"Off1\", \"invariants\": [\n      \"presenceSensor.presence == \\\\\"notpresent\\\\\"\",\n      \"switch.switch == \\\\\"off\\\\\"\"\n    ]},\n    {\"id\": \"On1\", \"invariants\": [\n      \"presenceSensor.presence == \\\\\"present\\\\\"\",\n      \"switch.switch == \\\\\"on\\\\\"\"\n    ]}\n  ],\n  \"transitions\": [\n    {\"source\": \"Off1\", \"target\": \"On1\",\n     \"trigger\": \"presenceSensor.presence == \\\\\"present\\\\\"\",\n     \"action\": \"switch.on()\"},\n    {\"source\": \"On1\", \"target\": \"Off1\",\n     \"trigger\": \"presenceSensor.presence == \\\\\"notpresent\\\\\"\",\n     \"action\": \"switch.off()\"}\n  ],\n  \"notes\": \"optional commentary relevant to the mapping\"\n}\n\nTASK:\nGiven the requirement text below, produce the JSON object per the SCHEMA and HARD CONSTRAINTS.\nIf any detail is unspecified, use the DEFAULT PATTERN to produce a minimal valid spec.\n\nREQUIREMENT:\n${req}\n`;\n\n// Emit to next node\nreturn {\n  prompt,\n  bundle_name: bundle,\n  requirement: req\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1856,
        16
      ],
      "id": "f2dedb37-66af-4bc1-8a8e-65eaa2a848d9",
      "name": "Build Extract Prompt"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4-turbo",
          "mode": "list",
          "cachedResultName": "GPT-4-TURBO"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $json.prompt }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1648,
        16
      ],
      "id": "b59a57c6-378b-4fd5-8209-9cf0b8f5d515",
      "name": "LLM Extract",
      "credentials": {
        "openAiApi": {
          "id": "VX5z0heC4ATw7L11",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the text returned by OpenAI\nlet txt =\n  $json.message?.content ||  // Common shape from \"Message a model\"\n  $json.choices?.[0]?.message?.content || // Older shape\n  $json.data?.[0]?.text || \n  $json.response || \n  \"\";\n\n// Clean up any extra formatting or code blocks\ntxt = String(txt).trim()\n  .replace(/^```[a-zA-Z]*\\n?/, \"\")\n  .replace(/```$/, \"\");\n\nlet spec;\ntry {\n  spec = JSON.parse(txt);\n} catch (e) {\n  throw new Error(\"LLM did not return valid JSON.\\n--- RAW ---\\n\" + txt);\n}\n\n// Pass parsed object to next node\nreturn { spec };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1296,
        16
      ],
      "id": "eb7e21cd-6c57-4c75-b227-ff8f48fe0e5f",
      "name": "Parse Spec JSON"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return { specString: JSON.stringify($json.spec, null, 2) };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1088,
        16
      ],
      "id": "e620598d-83b8-4275-b090-25555672dbd7",
      "name": "Stringify Spec"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "specString",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -880,
        16
      ],
      "id": "97e7fb06-cae1-4a7e-801f-1ccaafff5b1e",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2e7805b9-679f-45f3-b449-59794d6779e9",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "OK",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -256,
        16
      ],
      "id": "ed901c48-20ea-44f6-9c90-7e59ee3b233c",
      "name": "is valid?"
    },
    {
      "parameters": {
        "command": "powershell -NoProfile -Command \"Set-Location 'C:\\Users\\Matthew\\Desktop\\IDEs\\VSCode Projects\\NLPipeline'; py 'scripts\\validate_spec.py' 'temp\\spec.json' 'scripts\\caps.json'; $code=$LASTEXITCODE; Write-Output ('__EXIT_CODE__=' + $code); exit 0\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -464,
        16
      ],
      "id": "d4d9032f-33bb-4bc4-8de3-5e74e1fcb53e",
      "name": "Execute validate_spec.py",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "cmd /c \"C:\\Users\\Matthew\\Desktop\\IDEs\\VSCode Projects\\NLPipeline\\scripts\\run_genuml.bat\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        112,
        0
      ],
      "id": "f950f307-7d3f-4ab5-8f88-f8edd45c205d",
      "name": "Execute gen_uml_from_spec.py",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4-turbo",
          "mode": "list",
          "cachedResultName": "GPT-4-TURBO"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $json.prompt }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1648,
        272
      ],
      "id": "8b89ebd1-63e7-4731-a2b6-1442a0d2aae9",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "VX5z0heC4ATw7L11",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// --- Inputs pulled from earlier nodes ---\nconst webhookItem = $items('Webhook')[0]?.json ?? {};\nconst stringifyItem = $items('Stringify Spec')[0]?.json ?? {};\nconst validatorStdout = $json.stdout || \"\";\n\n// Natural-language requirement\nconst nl =\n  webhookItem.body?.requirement ??\n  webhookItem.requirement ??\n  \"\";\n\n// Bundle name (same sources you used earlier; default to Bundle1)\nconst bundle =\n  webhookItem.body?.bundle_name ??\n  webhookItem.bundle_name ??\n  \"Bundle1\";\n\n// The invalid JSON string we wrote earlier\nconst badSpecStr = stringifyItem.data || \"\";\n\n// Normalize validator feedback: drop the __EXIT_CODE__ line, normalize newlines\nconst validatorOut = validatorStdout\n  .split(/\\r?\\n/)\n  .filter((line) => !/^__EXIT_CODE__=/.test(line) && line.trim() !== \"\")\n  .join(\"\\n\");\n\nconst prompt = `\nYou must FIX a JSON spec so it passes a validator.\n\nHARD CONSTRAINTS (must be followed exactly):\n1) JSON only. Double quotes everywhere. No trailing commas. No comments.\n2) Keys allowed: bundle_name, devices, states, transitions, notes. Do not add others.\n3) You MUST include ALL of these devices exactly (even if the requirement text never mentions them):\n   {\"id\":\"presenceSensor\",\"type\":\"presenceSensor\",\"attributes\":[\"presence\"]}\n   {\"id\":\"motionSensor\",\"type\":\"motionSensor\",\"attributes\":[\"motion\"]}\n   {\"id\":\"switch\",\"type\":\"switch\",\"attributes\":[\"switch\"]}\n   - Do not rename ids or types. Do not omit any of the three.\n4) Capabilities and values:\n   presenceSensor.presence ∈ {\"present\",\"notpresent\"}\n   motionSensor.motion ∈ {\"active\",\"inactive\"}\n   switch.switch ∈ {\"on\",\"off\"}\n   Allowed actions: switch.on(), switch.off()\n5) Trigger grammar: <device>.<attribute> (==|!=) \"<value>\" with optional && or || between atoms.\n   Action grammar: exactly <device>.<command>().\n6) States/Transitions must be internally consistent with declared devices/attributes.\n   (It's acceptable if the requirement uses only presence + switch—motionSensor may be declared but unused.)\n7) Set \"bundle_name\" to \"${bundle}\".\n\nSCHEMA (exact shape):\n{\n  \"bundle_name\": string,\n  \"devices\": [ { \"id\": string, \"type\": string, \"attributes\": [string, ...] }, ... ],\n  \"states\":  [ { \"id\": string, \"invariants\": [string, ...] }, ... ],\n  \"transitions\": [ { \"source\": string, \"target\": string, \"trigger\": string, \"action\": string }, ... ],\n  \"notes\": string\n}\n\nDEFAULT PATTERN (when requirement maps to presence→switch lamp control):\n- states:\n  Off1 → invariants: [\"presenceSensor.presence == \\\\\"notpresent\\\\\", \"switch.switch == \\\\\"off\\\\\"\"]\n  On1  → invariants: [\"presenceSensor.presence == \\\\\"present\\\\\"\",     \"switch.switch == \\\\\"on\\\\\"\"]\n- transitions:\n  Off1 → On1 when presence becomes present; action \"switch.on()\"\n  On1 → Off1 when presence becomes notpresent; action \"switch.off()\"\n\n\nVALIDATOR FEEDBACK:\n${validatorOut}\n\nNATURAL LANGUAGE REQUIREMENT:\n${nl}\n\nCURRENT INVALID JSON:\n${badSpecStr}\n\nVALID OUTPUT EXAMPLE (format only; values may vary):\n{\n  \"bundle_name\": \"Bundle1\",\n  \"devices\": [\n    {\"id\": \"presenceSensor\", \"type\": \"presenceSensor\", \"attributes\": [\"presence\"]},\n    {\"id\": \"motionSensor\", \"type\": \"motionSensor\", \"attributes\": [\"motion\"]},\n    {\"id\": \"switch\", \"type\": \"switch\", \"attributes\": [\"switch\"]}\n  ],\n  \"states\": [\n    {\"id\": \"Off1\", \"invariants\": [\n      \"presenceSensor.presence == \\\\\"notpresent\\\\\"\",\n      \"switch.switch == \\\\\"off\\\\\"\"\n    ]},\n    {\"id\": \"On1\", \"invariants\": [\n      \"presenceSensor.presence == \\\\\"present\\\\\"\",\n      \"switch.switch == \\\\\"on\\\\\"\"\n    ]}\n  ],\n  \"transitions\": [\n    {\"source\": \"Off1\", \"target\": \"On1\",\n     \"trigger\": \"presenceSensor.presence == \\\\\"present\\\\\"\",\n     \"action\": \"switch.on()\"},\n    {\"source\": \"On1\", \"target\": \"Off1\",\n     \"trigger\": \"presenceSensor.presence == \\\\\"notpresent\\\\\"\",\n     \"action\": \"switch.off()\"}\n  ],\n  \"notes\": \"Arrival maps to presence==present; lamp maps to switch.\"\n}\n\nTASK:\nReturn a corrected JSON object that matches the schema and fixes validation errors.\n`;\n\nreturn { prompt };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1856,
        272
      ],
      "id": "8b9c2981-9271-439b-8c11-85dbcf7efda9",
      "name": "Build Revision Prompt"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "C:/Users/Matthew/Desktop/IDEs/VSCode Projects/NLPipeline/temp/spec.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -672,
        16
      ],
      "id": "4e358dc1-a24a-402d-aea1-db9705a27655",
      "name": "Write Binary File"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the text returned by OpenAI\nlet txt =\n  $json.message?.content ||  // Common shape from \"Message a model\"\n  $json.choices?.[0]?.message?.content || // Older shape\n  $json.data?.[0]?.text || \n  $json.response || \n  \"\";\n\n// Clean up any extra formatting or code blocks\ntxt = String(txt).trim()\n  .replace(/^```[a-zA-Z]*\\n?/, \"\")\n  .replace(/```$/, \"\");\n\nlet spec;\ntry {\n  spec = JSON.parse(txt);\n} catch (e) {\n  throw new Error(\"LLM did not return valid JSON.\\n--- RAW ---\\n\" + txt);\n}\n\n// Pass parsed object to next node\nreturn { spec };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1296,
        272
      ],
      "id": "7918b924-6302-4517-9581-3564fdcdbc02",
      "name": "Parse Revised Spec JSON"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return { specString: JSON.stringify($json.spec, null, 2) };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1088,
        272
      ],
      "id": "75d157b4-64cd-4554-9c55-6897bd14e409",
      "name": "Stringify Revised Spec"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "specString",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -896,
        272
      ],
      "id": "679720fc-94e8-4da0-96ea-16972eee92fd",
      "name": "Convert Revised File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "C:/Users/Matthew/Desktop/IDEs/VSCode Projects/NLPipeline/temp/spec.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -672,
        272
      ],
      "id": "092ae8d0-b13e-4a24-bbac-e435e19587a7",
      "name": "Writte Revised Binary File"
    },
    {
      "parameters": {
        "command": "powershell -NoProfile -Command \"Set-Location 'C:\\Users\\Matthew\\Desktop\\IDEs\\VSCode Projects\\NLPipeline'; py 'scripts\\validate_spec.py' 'temp\\spec.json' 'scripts\\caps.json'; $code=$LASTEXITCODE; Write-Output ('__EXIT_CODE__=' + $code); exit 0\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -464,
        272
      ],
      "id": "9c94f02d-76ff-45e3-b5cb-9ec3f36f50c4",
      "name": "Re-execute validate_spec.py",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2e7805b9-679f-45f3-b449-59794d6779e9",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "OK",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -256,
        272
      ],
      "id": "70cd3954-5059-49d0-8cba-e1138f68e8a9",
      "name": "re-check is valid?"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Build Extract Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Extract Prompt": {
      "main": [
        [
          {
            "node": "LLM Extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Extract": {
      "main": [
        [
          {
            "node": "Parse Spec JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Spec JSON": {
      "main": [
        [
          {
            "node": "Stringify Spec",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stringify Spec": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Write Binary File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "is valid?": {
      "main": [
        [
          {
            "node": "Execute gen_uml_from_spec.py",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Build Revision Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute validate_spec.py": {
      "main": [
        [
          {
            "node": "is valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute gen_uml_from_spec.py": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Parse Revised Spec JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Revision Prompt": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Binary File": {
      "main": [
        [
          {
            "node": "Execute validate_spec.py",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Revised Spec JSON": {
      "main": [
        [
          {
            "node": "Stringify Revised Spec",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stringify Revised Spec": {
      "main": [
        [
          {
            "node": "Convert Revised File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Revised File": {
      "main": [
        [
          {
            "node": "Writte Revised Binary File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Writte Revised Binary File": {
      "main": [
        [
          {
            "node": "Re-execute validate_spec.py",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Re-execute validate_spec.py": {
      "main": [
        [
          {
            "node": "re-check is valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "re-check is valid?": {
      "main": [
        [
          {
            "node": "Execute gen_uml_from_spec.py",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6b3036a9-792d-414b-bf31-70b569d67e7b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6647802072d2cc4e8eb214734bff764ab57f643f93ffeccd122f974954d36b0a"
  },
  "id": "MBS8HuMBM3gM2y91",
  "tags": []
}